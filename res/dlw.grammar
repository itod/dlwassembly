@before {
    PKTokenizer *t = self.tokenizer;

    // Number State config
    {
        t.numberState.allowsFloatingPoint = NO;
        t.numberState.allowsScientificNotation = NO;
        [t.numberState addPrefix:@"%" forRadix:2];
        [t.numberState addPrefix:@"$" forRadix:16];
    
        [t setTokenizerState:t.numberState from:'%' to:'%'];
        [t setTokenizerState:t.numberState from:'$' to:'$'];
    
        [t.numberState setFallbackState:t.symbolState from:'%' to:'%'];
        [t.numberState setFallbackState:t.symbolState from:'$' to:'$'];
    }
}

prog = stmt*;

stmt 
    = addStmt 
    | subStmt
    | loadStmt
    | saveStmt
    | jumpStmt
    | jumpzStmt
    | jumpnStmt
    | jumpoStmt
    ;
    
addStmt     = 'add'! arg ','! arg ';'!;
subStmt     = 'sub'! arg ','! arg ';'!;

loadStmt    = 'load'! arg ','! arg ';'!;
saveStmt    = 'save'! arg ','! arg ';'!;

jumpStmt    = 'jump'!  loc ';'!;
jumpzStmt   = 'jumpz'! loc ';'!;
jumpnStmt   = 'jumpn'! loc ';'!;
jumpoStmt   = 'jumpo'! loc ';'!;

arg 
    = lit
    | reg
    | addr
    | ref
    | offset
    ;

lit = Number;
reg = 'A' | 'B' | 'C' | 'D';
addr = '#'! Number;
ref = '#'! reg;
offset = '#'! '('! reg '+'! lit ')'!;

loc = arg | label;
label = { islower([LS(1) characterAtIndex:0]) }? Word;
